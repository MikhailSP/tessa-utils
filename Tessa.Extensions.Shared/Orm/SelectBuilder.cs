using System;
using System.Collections.Generic;
using System.Linq;
using LinqToDB.Data;
using NLog;
using Tessa.Cards;
using Tessa.Extensions.Shared.Generated.Tables;
using Tessa.Extensions.Shared.Orm.PartBuilder;
using Tessa.Platform.Data;

namespace Tessa.Extensions.Shared.Orm
{
    /// <summary>
    /// Билдер запроса в БД. Упрощает формирование SQL для запроса с Enum
    /// </summary>
    /// <typeparam name="T">Тип возвращаемого объекта</typeparam>
    /// <typeparam name="E">Enum, связанный с возвращаемым объектом</typeparam>
    public class SelectBuilder<T,E> where T : AutogeneratedClass<E> where E : Enum
    {
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger();

        private readonly IDbScope dbScope;
        private readonly Select select=new Select();
        private readonly Tables tables=new Tables();
        private readonly Where where=new Where();
        private readonly OrderBy orderBy=new OrderBy();

        public SelectBuilder(IDbScope dbScope)
        {
            this.dbScope = dbScope;
            this.tables.Add(typeof(T));
        }

        /// <summary>
        /// Выполнить запрос и получить единственный результат типа Т
        /// </summary>
        /// <param name="throwExceptionIfNull">Выбросить ошибку, если значение не найдено</param>
        /// <returns>Объект - результат выполнения запроса</returns>
        public T ExecuteSingle(bool throwExceptionIfNull=false)
        {
            using (dbScope.Create())
            {
                DbManager db = dbScope.Db;
                var command = this.Compile();
                Logger.Debug($"ExecuteSingle Command = '{command}'");
                
                var result = db.SetCommand(command).ExecuteObject<T>();
                if (throwExceptionIfNull && result == null)
                {
                    throw new Exception($"Запрос '{command}' не вернул результатов");
                }
                return result;
            }
        }
        
        /// <summary>
        /// Выполнить запрос и получить список объектов-строк результата
        /// </summary>
        /// <returns>Список объектов. Каждый объект - одна строка запроса</returns>
        public List<T> ExecuteList()
        {
            using (dbScope.Create())
            {
                DbManager db = dbScope.Db;
                var command = this.Compile();
                Logger.Debug($"ExecuteList Command = '{command}'");
                return db.SetCommand(command).ExecuteList<T>();
            }
        }

        /// <summary>
        /// Выполнить запрос и получить скаляр (единственный примитив)
        /// </summary>
        /// <typeparam name="TO">Тип возвращаемого объекта</typeparam>
        /// <returns>Скаляр, например значение типа int</returns>
        public TO ExecuteScalar<TO>()
        {
            using (dbScope.Create())
            {
                DbManager db = dbScope.Db;
                var command = this.Compile();
                Logger.Debug($"ExecuteScalar<{typeof(TO).Name}> Command = '{command}'");
                return db.SetCommand(command).ExecuteScalar<TO>();
            }
        }

        /// <summary>
        /// Получить значение из БД, подставив параметры в запрос 
        /// </summary>
        /// <param name="scope">Скоуп БД</param>
        /// <param name="request">SQL-запрос, в котором есть параметры вида @Param</param>
        /// <param name="paramValues">Мапа значений параметров (параметр -> значение)</param>
        /// <typeparam name="T">Тип возвращаемого объекта</typeparam>
        /// <returns>Объект типа Т - результат выполнения запроса</returns>
        public T ExecuteRequest(string sqlRequest, Dictionary<string, object> paramValues)
        {
            using (this.dbScope.Create())
            {
                DbManager db = dbScope.Db;
                var parameters = new List<DataParameter>();
                foreach (var pair in paramValues)
                {
                    parameters.Add(db.Parameter(pair.Key, pair.Value));
                }
                return db.SetCommand(sqlRequest, parameters.ToArray()).ExecuteObject<T>();
            }
        }        
        
        /// <summary>
        /// Получить объект из БД подставив параметр @ID в запрос
        /// </summary>
        /// <param name="scope">Скоуп БД</param>
        /// <param name="request">SQL-запрос, содержащий единственный параметр @ID</param>
        /// <param name="id">Значение параметре @ID</param>
        /// <typeparam name="T">Тип возвращаемого объекта</typeparam>
        /// <returns>Объект типа Т - результат выполнения запроса</returns>
        public T ExecuteRequestWithId(string request, object id)
        {
            using (this.dbScope.Create())
            {
                DbManager db = this.dbScope.Db;
                return db.SetCommand(request, db.Parameter("ID",id)).ExecuteObject<T>();
            }
        }

        /// <summary>
        /// Выполнить запрос к БД, получить данные из нее и смержить с данными карточки.
        /// Метод полезен для получения актуального значения карточки (данные из БД + дельта из карточки)
        /// </summary>
        /// <param name="card">Карточка</param>
        /// <returns>Собранные данные карточки (БД + дельта с карточки)</returns>
        public T MergeWithCard(Card card)
        {
            using (dbScope.Create())
            {
                DbManager db = dbScope.Db;
                var command = this.Where(card).Compile();
                Logger.Debug($"ExecuteSingle Command = '{command}'");
                
                var result = db.SetCommand(command).ExecuteObject<T>() ?? Activator.CreateInstance<T>();
                result.MergeCard(card);
                return result;
            }
        }

        /// <summary>
        /// Выбрать только нужное поле. Если не вызывать ни разу Select на билдере - будет выбрано *
        /// </summary>
        /// <param name="field">Поле, которое необходимо заполнить в объекте-результате</param>
        /// <typeparam name="E">Тип Enum (по нему выбирается секции/таблица для запроса)</typeparam>
        /// <returns>Билдер</returns>
        public SelectBuilder<T,E> Select(E field)
        {
            Logger.Debug($"Call Select {field}");
            this.select.Add(field);
            return this;
        }

        /// <summary>
        /// Выбрать только нужные поля. Если не вызывать ни разу Select на билдере - будет выбрано *
        /// </summary>
        /// <param name="fields">Поля, которые необходимо заполнить в объекте-результате</param>
        /// <typeparam name="E">Тип Enum (по нему выбирается секции/таблица для запроса)</typeparam>
        /// <returns>Билдер</returns>
        public SelectBuilder<T,E> Select(params E[] fields) 
        {
            foreach (var field in fields)
            {
                Select(field);
            }
            return this;
        }

        /// <summary>
        /// Добавление условия отбора - выбор только строк с ИД = ИД карточки
        /// </summary>
        /// <param name="card">Карточка</param>
        /// <returns>Билдер</returns>
        public SelectBuilder<T,E> Where(Card card)
        {
            Logger.Debug($"Call Where card = {card.ID}");
            this.where.Eq("ID",card.ID);
            return this;
        }

        /// <summary>
        /// Добавить в WHERE запрос "=" или "IS NULL", если параметр = null. Если добавлено несколько Where - они связываются через AND
        /// </summary>
        /// <param name="field">Поле, которое должно быть равно Значению</param>
        /// <param name="val">Значение</param>
        /// <typeparam name="E">Тип Enum (по нему выбирается секции/таблица для запроса)</typeparam>
        /// <returns>Билдер</returns>
        public SelectBuilder<T,E> WhereEq(E field, object val)
        {
            Logger.Debug($"Call WhereEq {field}, {val}");
            this.where.Eq(field,val);
            return this;
        }
        
        /// <summary>
        /// Добавить в WHERE запрос IN со списком значений. Если добавлено несколько Where - они связываются через AND
        /// </summary>
        /// <param name="field">Поле, которое должно быть равно одному из Значений в valu</param>
        /// <param name="values">Список значений</param>
        /// <typeparam name="E">Тип Enum (по нему выбирается секции/таблица для запроса)</typeparam>
        /// <returns>Билдер</returns>
        public SelectBuilder<T,E> WhereIn(E field, IEnumerable<object> values)
        {
            var list = values.ToList();
            Logger.Debug($"Call WhereIn {field}, {list.Count()}");
            this.where.In(field,list);
            return this;
        }
        

        /// <summary>
        /// Добавить в запрос ограничение по количеству возвращаемых результатов (TOP N)
        /// </summary>
        /// <param name="top">Максимальное количество возвращаемых результатов</param>
        /// <returns>Билдер</returns>
        public SelectBuilder<T, E> Top(int top)
        {
            Logger.Debug($"Call Top {top}");
            this.select.Top(top);
            return this;
        }

        /// <summary>
        /// Добавить в запрос сортировку по полям в порядке возрастания
        /// </summary>
        /// <param name="fields">Поля</param>
        /// <returns>Билдер</returns>
        public SelectBuilder<T, E> OrderBy(params E[] fields)
        {
            foreach (var field in fields)
            {
                this.OrderBy(field, false);
            }
            return this;
        }  
        
        /// <summary>
        /// Добавить в запрос сортировку по полям в порядке убывания
        /// </summary>
        /// <param name="fields">Поля</param>
        /// <returns>Билдер</returns>
        public SelectBuilder<T, E> OrderByDesc(params E[] fields)
        {
            foreach (var field in fields)
            {
                this.OrderBy(field, true);
            }
            return this;
        }

        /// <summary>
        /// Добавить в запрос сортировку по полю в прямом (desc=false) или обратном (desc=true) порядке
        /// </summary>
        /// <param name="field">Поле</param>
        /// <param name="desc">true - В обратном порядке</param>
        /// <returns></returns>
        public SelectBuilder<T, E> OrderBy(E field, bool desc)
        {
            Logger.Debug($"Call OrderBy {field} {desc}");
            if (desc)
            {
                this.orderBy.Desc(field);
            }
            else
            {
                this.orderBy.Asc(field);
            }
            return this;
        }

        /// <summary>
        /// Компиляция всех частей в строку SQL-запроса
        /// </summary>
        /// <returns>Строка, представляющая собой полный запрос</returns>
        private string Compile()
        {
            var request = this.@select.Get + this.tables.GetFrom + this.where.Get + this.orderBy.Get; 
            Logger.Trace($"Запрос '{request}'");
            return request;
        }
    }
}