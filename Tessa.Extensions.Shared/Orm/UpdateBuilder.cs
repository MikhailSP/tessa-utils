using System;
using NLog;
using Tessa.Cards;
using Tessa.Extensions.Shared.Generated.Tables;
using Tessa.Extensions.Shared.Orm.PartBuilder;
using Tessa.Platform.Data;

namespace Tessa.Extensions.Shared.Orm
{
    /// <summary>
    /// Билдер запроса UPDATE в БД. Упрощает формирование SQL для запроса с Enum
    /// </summary>
    /// <typeparam name="T">Тип возвращаемого объекта</typeparam>
    /// <typeparam name="E">Enum, связанный с возвращаемым объектом</typeparam> 
    public class UpdateBuilder<T,E> where T : AutogeneratedClass<E> where E : Enum
    {
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger();

        private readonly IDbScope dbScope;
        private readonly Tables tables=new Tables();
        private readonly Where where = new Where();
        private readonly Values values=new Values();

        public UpdateBuilder(IDbScope dbScope)
        {
            this.dbScope = dbScope;
        }

        /// <summary>
        /// Обновить значения в БД (фактический вызов запроса)
        /// </summary>
        /// <returns>Количество изменившихся строк</returns>
        public int Update()
        {
            using (dbScope.Create())
            {
                DbManager db = dbScope.Db;
                var command = this.Compile();
                Logger.Debug($"Update Command = '{command}'");
                var changedRowsCount = db.SetCommand(command).ExecuteNonQuery();
                Logger.Debug($"Изменено строк: {changedRowsCount}");
                return changedRowsCount;
            }
        }

        /// <summary>
        /// Обновить единственное значение в БД (фактический вызов запроса).
        /// Если при выполнении запроса обновляется не одна, а несколько строк, то транзакция откатывается и выбрасывается эксэпшен.
        /// </summary>
        public void UpdateSingle()
        {
            using (dbScope.Create())
            {
                DbManager db = dbScope.Db;
                var command = this.Compile();
                Logger.Debug($"Update Command = '{command}'");
                var changedRowsCount = db.SetCommand(command).ExecuteNonQuery();
                Logger.Debug($"Изменено строк: {changedRowsCount}");
                if (changedRowsCount != 1)
                {
                    Logger.Error($"Попытка обновления некорректного количества строк. Ожидалось 1, попытка обновления: {changedRowsCount}. Откат транзакции");
                    this.dbScope.Db.RollbackTransaction();
                    throw new ArgumentOutOfRangeException($"Попытка обновления нескольких строк: {changedRowsCount}");
                }
            }
        }

        /// <summary>
        /// Установить значение поля в БД
        /// </summary>
        /// <param name="field">Поле в БД</param>
        /// <param name="value">Значение</param>
        /// <typeparam name="E">Тип Enum (по нему выбирается секции/таблица для запроса)</typeparam>
        /// <returns>Билдер</returns>
        public UpdateBuilder<T,E> Set(E field, object value)
        {
            Logger.Debug($"Call Set field = {field}, value = {value}");
            this.values.Add(field, value);
            this.tables.Add(field);
            return this;
        }

        /// <summary>
        /// Добавление условия отбора - выбор только строк с ИД = ИД карточки
        /// </summary>
        /// <param name="card">Карточка</param>
        /// <returns>Билдер</returns>
        public UpdateBuilder<T,E> Where(Card card)
        {
            Logger.Debug($"Call Where card = {card.ID}");
            this.where.Eq("ID",card.ID);
            return this;
        }
        
        /// <summary>
        /// Добавить в WHERE запрос "=" или "IS NULL", если параметр = null. Если добавлено несколько Where - они связываются через AND
        /// </summary>
        /// <param name="field">Поле, которое должно быть равно Значению</param>
        /// <param name="val">Значение</param>
        /// <typeparam name="E">Тип Enum (по нему выбирается секции/таблица для запроса)</typeparam>
        /// <returns>Билдер</returns>
        public UpdateBuilder<T,E> WhereEq(E field, object val)
        {
            Logger.Debug($"Call WhereEq {field}, {val}");
            this.where.Eq(field,val);
            return this;
        }

        
        /// <summary>
        /// Компиляция всех частей в строку SQL-запроса
        /// </summary>
        /// <returns>Строка, представляющая собой полный запрос</returns>
        private string Compile()
        {
            return this.tables.GetUpdate + this.values.Get + this.where.Get;
        }
    }
}