using System;
using System.Reflection;
using Tessa.Cards;

namespace Tessa.Extensions.Shared.Generated.Tables
{
    /// <summary>
    /// Классы, сгенерированные из схемы данных Тесса
    /// </summary>
    /// <typeparam name="T">Enum, который содержит все поля данного типа класса</typeparam>
    public class AutogeneratedClass<T> where T : Enum {
        /// <summary>
        /// Заменить значения в объекте значениями из соответствующей секции карточки.
        /// Метод полезен для получения актуального значения карточки (данные из БД + дельта из карточки)
        /// Если в карточке нет значения - оно не заменяется
        /// </summary>
        /// <param name="card">Карточка</param>
        /// <returns>Объект с заменнеными из карточки значениями</returns>
        public AutogeneratedClass<T> MergeCard(Card card)
        {
            if (card == null) return this;
            if (!card.Sections.ContainsKey(typeof(T).Name)) return this;
            var section = card.Sections[typeof(T).Name]; 
            var thisType = this.GetType();
            
            foreach (var enumVal in Enum.GetValues(typeof(T)))
            {
                var key = enumVal.ToString();
                if (!section.Fields.ContainsKey(key)) continue;
                var value = section.Fields[key];
                var propertyInfo = thisType.GetProperty(key);
                SetValue(propertyInfo, this, value);
            }

            return this;
        }
        
        private static void SetValue(PropertyInfo info, object instance, object value)
        {
            var propertyType = info.PropertyType;
            var isNullable=propertyType.IsGenericType 
                           && propertyType.GetGenericTypeDefinition() == typeof(Nullable<>);
            var targetType = isNullable
                ? Nullable.GetUnderlyingType(propertyType) 
                : propertyType; 
            var convertedValue = Convert.ChangeType(value, targetType);

            info.SetValue(instance, convertedValue, null);
        }
    }
}